/*

https://www.cnblogs.com/ricklz/p/13648859.html
1.
原子操作即是进行过程中不能被中断的操作，针对某个值的原子操作在被进行的过程中，CPU绝不会再去进行其他的针对该值的操作
为了实现这样的严谨性，原子操作仅会由一个独立的CPU指令代表和完成。原子操作是无锁的，常常直接通过CPU指令直接实现. 事实上, 其它同步技术的实现常常依赖于原子操作

2.
具体的原子操作在不同的操作系统中实现是不同的。
比如在Intel的CPU架构机器上，主要是使用总线锁的方式实现的。 大致的意思就是当一个CPU需要操作一个内存块的时候，向总线发送一个LOCK信号，所有CPU收到这个信号后就不对这个内存块进行操作了。 等待操作的CPU执行完操作后，发送UNLOCK信号，才结束。
在AMD的CPU架构机器上就是使用MESI一致性协议的方式来保证原子操作。 所以我们在看atomic源码的时候，我们看到它针对不同的操作系统有不同汇编语言文件。

3.
Go语言的sync/atomic提供了对原子操作的支持，用于同步访问整数和指针。
Go语言提供的原子操作都是非入侵式的
原子操作支持的类型包括int32、int64、uint32、uint64、uintptr、unsafe.Pointer

atomic
强制同一时刻只能有一个 goroutine 运行

*/

package main

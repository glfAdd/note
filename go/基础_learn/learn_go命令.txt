
********************************************
go env          查看环境变量
go build xxx.go       不包含文件名时, go 工具会默认使用当前目录来编译
go clean xxx.go         清理编译生成的文件
go build aaa/...        ... 是通配符, 编译aaa目录下所有包
go fmt                  格式化代码


******************************************** build
1. 执行go build之后，它不会产生任何文件, 如果需要在$GOPATH/pkg下生成相应的文件那就得执行go install
2. 如果是main包，当你执行go build之后，它就会在当前目录下生成一个可执行文件。如果需要在$GOPATH/bin下生成相应的文件，需要执行go install, 或者使用go build -o 路径/a.exe
3. go build命令默认会编译当前目录下的所有go文件
3. 如果某个项目文件夹下有多个文件，而你只想编译某个文件，就可在go build之后加上文件名，例如go build a.go
4. 指定编译输出的文件名 go build -o astaxie.exe
5. go build会忽略目录下以“_”或“.”开头的go文件

参数的介绍
    -o 指定输出的文件名，可以带上路径，例如 go build -o a/b/c
    -i 安装相应的包，编译+go install
    -a 更新全部已经是最新的包的，但是对标准包不适用
    -n 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的
    -p n 指定可以并行可运行的编译数目，默认是CPU数目
    -race 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器
    -v 打印出来我们正在编译的包名
    -work 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除
    -x 打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行
    -ccflags 'arg list' 传递参数给5c, 6c, 8c 调用
    -compiler name 指定相应的编译器，gccgo还是gc
    -gccgoflags 'arg list' 传递参数给gccgo编译连接调用
    -gcflags 'arg list' 传递参数给5g, 6g, 8g 调用
    -installsuffix suffix 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，-race的时候默认已经是-installsuffix race,大家可以通过-n命令来验证
    -ldflags 'flag list' 传递参数给5l, 6l, 8l 调用
    -tags 'tag list' 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的 Build Constraints

******************************************** clean
移除当前源码包和关联源码包里面编译生成的文件, 包括
    _obj/            旧的object目录，由Makefiles遗留
    _test/           旧的test目录，由Makefiles遗留
    _testmain.go     旧的gotest文件，由Makefiles遗留
    test.out         旧的test记录，由Makefiles遗留
    build.out        旧的test记录，由Makefiles遗留
    *.[568ao]        object文件，由Makefiles遗留

    DIR(.exe)        由go build产生
    DIR.test(.exe)   由go test -c产生
    MAINFILE(.exe)   由go build MAINFILE.go产生
    *.so             由 SWIG 产生

参数介绍
    -i 清除关联的安装的包和可运行文件，也就是通过go install安装的文件
    -n 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的
    -r 循环的清除在import中引入的包
    -x 打印出来执行的详细命令，其实就是-n打印的执行版本

******************************************** fmt
格式化代码

go fmt <文件名>.go
gofmt -w -l src     格式化整个项目

参数介绍
    -l 显示那些需要格式化的文件
    -w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。
    -r 添加形如“a[b:len(a)] -> a[b:]”的重写规则，方便我们做批量替换
    -s 简化文件中的代码
    -d 显示格式化前后的diff而不是写入文件，默认是false
    -e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。
    -cpuprofile 支持调试模式，写入相应的cpufile到指定的文件

******************************************** get
用来动态获取远程代码包的，目前支持的有BitBucket、GitHub、Google Code和Launchpad
这个命令在内部实际上分成了两步操作：
    1: 下载源码包到src
    2: 执行go install

参数介绍：
    -d 只下载不安装
    -f 只有在你包含了-u参数的时候才有效，不让-u去验证import中的每一个都已经获取了，这对于本地fork的包特别有用
    -fix 在获取源码之后先运行fix，然后再去做其他的事情
    -t 同时也下载需要为运行测试所需要的包
    -u 强制使用网络去更新包和它的依赖包
    -v 显示执行的命令

** 问题: 速度慢
# 启用 Go Modules 功能
export GO111MODULE=on
# 配置 GOPROXY 环境变量
export GOPROXY=https://mirrors.aliyun.com/goproxy/

******************************************** install
这个命令在内部实际上分成了两步操作：
    1: 是生成结果文件(可执行文件或者.a包)，
    2: 把编译好的结果移到$GOPATH/pkg或者$GOPATH/bin
















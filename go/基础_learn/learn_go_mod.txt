https://juejin.im/post/6844903798658301960

记录和解析对其他模块的依赖性


******************************************** GO111MODULE
GO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。
GO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。
GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：
    当前目录在GOPATH/src之外且该目录包含go.mod文件
    当前文件在包含go.mod文件的目录下面。

当modules 功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。
******************************************** 命令
go mod 参数
    download        下载依赖包
    edit            编辑go.mod
    graph           打印模块依赖图
    init            在当前目录初始化mod
    tidy            拉取缺少的模块，移除不用的模块
    vendor          将依赖复制到vendor下
    verify          验证依赖是否正确
    why             解释为什么需要依赖

******************************************** 使用
1. 在GOPATH 目录之外新建一个目录，并使用go mod init 初始化生成go.mod 文件
    go mod init go_learn

go.mod 提供了module, require、replace和exclude 四个命令
    module 语句指定包的名字（路径）
    require 语句指定的依赖项模块
    replace 语句可以替换依赖项模块
    exclude 语句可以忽略依赖项模块

2.

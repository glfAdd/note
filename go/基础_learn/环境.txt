多版本管理工具
https://github.com/moovweb/gvm

语言下载地址
https://golang.google.cn/dl/

******************************************** gvm 管理golang版本
目录结构
archive             # go 源码
bin                 # gvm 可执行文件
environments        # 不同环境的环境变量配置
scripts             # gvm 的子命令脚本
logs                # 日志信息
pkgsets             # 每个独立环境 gopath 所在路径

1. 安装依赖
install curl git mercurial make binutils bison gcc build-essential

2. 安装
bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)

3. 命令
gvm list                已安装的版本
gvm listall             可安装的版本
gvm install go1.8.7     安装指定版本
gvm uninstall go1.13    卸载
gvm version             版本信息
gvm use xxxx            切换版本(临时)
gvm use go1.12 --default    切换版本(永久)

4. 安装下载很慢解决办法
    下载 go1.8.7.linux-amd64.tar.gz 放入archive中
    再执行安装 gvm install go1.8.7 -B 


******************************************** 环境变量
GOROOT: GoLang安装目录
GOPATH: Go 命令环境依赖，其中主要目录
    bin 编译后生成的可执行文件
    pkg 编译后生成的文件
    src 存放源代码
GO111MODULE: 默认情况下，GO111MODULE=auto 自动模式
    auto 自动模式下，如果当前目录里有go.mod文件，就使用go modules，否则使用旧的GOPATH和vendor机制
    on 开启模式，1.12后，都会使用go.mod 里 require的包
    off 关闭模式


初始化模块.
初始化名为hello的模块，并且生成go.mod和go.sum记录当前依赖包名及版本信息，由程序自动维护
手动改变 go.mod后需要手动清空go.sum再重新生成：

go mod init hello

import (
"hello/utils"
"github.com/astaxie/beego"
)




******************************************** 包管理
1. 创建 go.mod 文件
go mod init gin

2. 包依赖更新
go build, go test, go list时，go会自动得更新go.mod文件，将依赖关系写入其中。

3. 手动处理依赖关系, 并且将包下载放入cache
go mod tidy






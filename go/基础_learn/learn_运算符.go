/*
%	求余		B % A 输出结果 0
++	自增		A++ 输出结果 11
--	自减		A-- 输出结果 9


==
!=
>
<
>=
<=


&&	逻辑 AND 运算符
||	逻辑 OR 运算符
!	逻辑 NOT 运算符


位运算符
&	按位与运算符"&"是双目运算符。 其功能是参与运算的两数各对应的二进位相与。 	(A & B) 结果为 12, 二进制为 0000 1100
|	按位或运算符"|"是双目运算符。 其功能是参与运算的两数各对应的二进位相或	(A | B) 结果为 61, 二进制为 0011 1101
^	按位异或运算符"^"是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。	(A ^ B) 结果为 49, 二进制为 0011 0001
<<	左移运算符"<<"是双目运算符。左移n位就是乘以2的n次方。 其功能把"<<"左边的运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。 	A << 2 结果为 240 ，二进制为 1111 0000
>>	右移运算符">>"是双目运算符。右移n位就是除以2的n次方。 其功能是把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数。

A = 60
B = 13
其二进制数转换为
A = 0011 1100
B = 0000 1101
-----------------
A&B = 0000 1100
A|B = 0011 1101
A^B = 0011 0001


=	简单的赋值运算符，将一个表达式的值赋给一个左值	C = A + B 将 A + B 表达式结果赋值给 C
+=	相加后再赋值	C += A 等于 C = C + A
-=	相减后再赋值	C -= A 等于 C = C - A
*=	相乘后再赋值	C *= A 等于 C = C * A
/=	相除后再赋值	C /= A 等于 C = C / A
%=	求余后再赋值	C %= A 等于 C = C % A
<<=	左移后赋值 	C <<= 2 等于 C = C << 2
>>=	右移后赋值 	C >>= 2 等于 C = C >> 2
&=	按位与后赋值	C &= 2 等于 C = C & 2
^=	按位异或后赋值	C ^= 2 等于 C = C ^ 2
|=	按位或后赋值	C |= 2 等于 C = C | 2


&	返回变量存储地址
*	指针变量


运算符优先级(数字高优先级高)
5 	* / % << >> & &^
4 	+ - | ^
3 	== != < <= > >=
2 	&&
1 	||


*/

package main

import "fmt"

func main() {
	fmt.Printf("aa")

}

"""
closure
在外函数中定义内函数, 内函数用外函数的局部变量, 外函数返回内函数的引用, 这样就构成了一个闭包

局部变量
  - 一般情况, 如果一个函数结束, 函数的内部所有东西都会释放掉, 局部变量都会消失
  - 闭包外函数在结束的时候发现临时变量将来会在内部函数中用到, 就把这个临时变量绑定给了内部函数, 然后自己再结束. 所以外函数已经结束了, 调用内函数的时候仍然能够使用外函数的临时变量

内函数中想修改外函数的局部变量
  - python3: 可以用nonlocal 关键字声明一个变量， 表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。
  - python2: 没有nonlocal这个关键字，我们可以把闭包变量改成可变类型数据进行修改，比如列表
"""


# outer是外部函数 a b c都是外函数的临时变量
def outer(a):
    print('outer -----')
    b = 10
    c = [a]

    def inner():
        print('inner -----')
        # 在内函数中 用到了外函数的临时变量
        nonlocal b
        b += 1
        c[0] += 1
        print(c[0])
        print(b)

    return inner


# 外函数传入参数5, 此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo
# 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数
demo = outer(5)
# 同一个闭包
# demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数
demo()  # 6  11
demo()  # 7  12

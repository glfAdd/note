""" ============================ Ngxin服务器的Web请求处理方式
异步非阻塞
1. Nginx启动后, 主进程master process和工作进程worker process
2. 每个工作进程使用异步非阻塞方式. 当某个工作进程收到客户端请求后, 调用IO处理, 如果不能立刻得到结果就去处理其他请求, 客户端在此期间也无需等待响应可以处理其他事情
3. 当调用IO得到结果是, 通知次工作进程, 该工作进程得到通知挂起当前处理的事务, 去响应客户端


多进程方式
1. 服务器没收到一个客户端请求时, 就创建子进程和客户端建立连接, 直到段考子进程才结束
2. 优点: 进程间互相独立, 处理请求时互不影响, 子进程退出时资源被系统回收,不会留下任何垃圾
3. 缺点: 子进程资源和时间开销大, 大量并发请求导致性能降低

多线程方式
1. 服务器每接收到客户端请求时, 创建新线程和客户端建立连接
2. 缺点: 多个线程在同一个进程内, 可以访问相同的内存空间, 彼此之间互相影响, 需要自己管理内存. 服务器需要不停运行错误积累可能产生严重影响

异步方式
     同步阻塞
     1. 发送方向接收方发送请求后一直等待响应. 
     2. 接收方处理请求时进行IO操作不能马上返回, 就一直等, 直到返回给发送方. 期间不能进行其他工作.
     
     同步非阻塞
     1. 发送方向接收方发送请求后一直等待响应. 
     2. 接收方处理请求时进行IO操作不能马上返回, 立刻返回, 接收方做其他事情
     3. 由于一直没有响应发送方一直等待, 直到IO操作完成接收方反水数据, 发送方才发型下一次请求
     
     异步阻塞
     1. 发送方发送后不等响应, 做其他事情
     2. 接收方处理IO不能立刻得到结果, 直到得到结果返回, 期间不能做其他事情
     
     异步非阻塞
     1. 发送方发送后不等响应, 做其他事情
     2. 接收方处理IO不能立刻得到结果, 不等待, 做其他事情. 得到结果后返回给发送方.

同步机制: 发送方发送请求后, 收到响应后才接着发送请求
异步机制: 发送方发送请求后, 不等待接收方响应这个请求, 继续发送下一个请求
socket阻塞: 调用结果范湖之前, 当前线程从运行被挂起, 直到结果赶回才进入就绪状态, 等待CUP后续执行
socket非阻塞: 如果调用结果不能立刻返回, 当前线程也不会挂起, 立刻返回执行下一个调用
"""

""" ============================ Nginx的事件处理机制
作用: Nginx工作进程调用IO后就去做其他事情, 当IO掉一个呢返回后通知工作进程, IO调用把自己的工作状态通知工作进程. 

事件驱动模型组成: 事件手机器, 事件发送器, 事件处理器

Nginx响应和处理Web请求过程基于事件驱动模型

事件驱动处理库被称为多路IO服用

select库
1. Linux和Windows都支持的事件驱动模型库
2. 创建所关注事件的描述符集合. 创建3类事件描述集合, 分别收集读事件Read/写事件Write/异常事件Exception
3. 调用底层提供的select()函数, 等待事件发生
4. 轮询3个集合所有事件, 检测是否发生, 如果有就进行处理

pool库
1. Linux事件驱动模型, Windows不支持
2. 创建一个集合, 每个事件描述符设置读事件/写事件/异常事件, 轮序是同时检测3个事件是否发生
3. select的优化

epool库
1. 高性能
2. 
"""

""" ============================ Nginx服务架构
1. Nginx启动后, 产生一个主进程 master process和工作进程worker process 
2. 主进程: 配置文件解析/数据结构初始化/模块配置和注册/信号处理/网络监听生成/工作进程生成和管理
3. 工作进程: 进程初始化/模块调用/请求管理
4. Nginx将接收到的Web请求通过代理转发到后端服务器, 后端服务器处理数据然后将结果返回
5. Nginx为了提高请求响应效率和网络压力, 采用缓存机制, 将历史响应数据缓存到本地. 在每次Nginx启动后的一段时间内, 会启动专门的进程对本地缓存的内容重建索引,
"""

""" ============================ 主进程
1. 读取Nginx配置文件并验证其有效性和正确性。
2. 建立、绑定和关闭Socket。
3. 按照配置生成、管理和结束工作进程。
4. 接收外界指令，比如重启、升级及退出服务器等指令。
5. 不中断服务，实现平滑重启，应用新配置。
6. 不中断服务，实现平滑升级，升级失败进行回滚处理。
7. 开启日志文件，获取文件描述符。
8. 编译和处理Perl 脚本
"""

""" ============================ 工作进程
1. 接收客户端请求。
2. 将请求依次送入各个功能模块进行过滤处理。
3. I0调用，获取响应数据。
4. 与后端服务器通信，接收后端服务器处理结果。
5. 数据缓存，访问缓存索引、查询和调用缓存数据。
6. 发送请求结果，响应客户端请求。
7. 接收主程序指令，比如重启、升级和退出等指令。
"""

""" ============================ 
Cache模块: 缓存索引重建和缓存索引管理

缓存索引重建进程
1. Nginx服务启动一段时间之后(默认是1分钟)由主进程生成, 在缓存元数据重建完成后就自动退出
2. 根据本地磁盘上的缓存文件在内存中建立索引元数据库, 对本地磁盘上存放缓存文件的目录结构进行扫描, 检查内存中已有的缓存元数据是否正确, 并更新索引元数据库

缓存索引管理进程
1. 一般存在于主进程的整个生命周期负责对缓存索引进行管理
2. 主要负责在索引元数据更新完成后，对元数据是否过期做出判断
"""

""" ============================ 进程交互
Master Worker交互
1. 工作进程是由主进程生成的. 主进程根据配置文件决定生成的工作进程的数量, 然后建立一张全局工作进程表用于存放当前未退出的所有工作进程
2. 主进程生成工作进程后, 将新生成的工作进程加入到工作进程表中，并建立一个单向管道并将其传递给该工作进程
3. 主进程与外界通过信号机制进行通信，当接收到需要处理的信号时，它通过管道向相关的工作进程发送正确的指令。
4. 每个工作进程都有能力捕获管道中可读事件，当管道中有可读事件时，工作进程从管道读取并解析指令，然后采取相应的措施。这样就完成了Master- Worker的交互。
"""
